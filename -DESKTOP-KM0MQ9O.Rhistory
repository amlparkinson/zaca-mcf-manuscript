mortality_qual %in% c("Low", "None") ~ "Low")) %>%
mutate(three_class_mortality = as.factor(three_class_mortality)) %>%
mutate(three_class_mortality= fct_relevel(three_class_mortality,
levels=c("Low", "Moderate", "High")))
mcf <- read.csv('Zaca MCF variables for model.csv') %>%
mutate(mortality_qual= fct_relevel(mortality_qual, levels=c("None", "Low", "Moderate", "High")))
mcf <- read.csv('Zaca MCF variables for model.csv') %>%
mutate(mortality_qual= fct_relevel(mortality_qual, levels=c("None", "Low", "Moderate", "High"))) %>%
mutate(dnbr_qualitative = case_when(
dnbr < 0.1 ~ "unburned",
dnbr < 0.27 ~ "low",
dnbr < 0.66 ~ "moderate",
dnbr > 0.66 ~ "high")) %>%
mutate(dnbr_qualitative = as.factor(dnbr_qualitative),
dnbr_qualitative = fct_relevel(dnbr_qualitative, levels=c("high", "moderate", "low", "unburned"))) %>%
mutate(aspect_transformed = (1-cos((2*pi*Mean_Aspect)/360))/2) %>%
mutate(three_class_mortality = case_when(
mortality_qual %in% "High" ~ "High",
mortality_qual %in% "Moderate" ~ "Moderate",
mortality_qual %in% c("Low", "None") ~ "Low")) %>%
mutate(three_class_mortality = as.factor(three_class_mortality)) %>%
mutate(three_class_mortality= fct_relevel(three_class_mortality,
levels=c("Low", "Moderate", "High")))
mcf <- read.csv('Zaca MCF variables for model.csv')
mcf <- read.csv('Zaca MCF variables for model.csv') %>%
mutate(mortality_qual= fct_relevel(mortality_qual, levels=c("None", "Low", "Moderate", "High"))) %>%
# mutate(dnbr_qualitative = case_when(
#   dnbr < 0.1 ~ "unburned",
#   dnbr < 0.27 ~ "low",
#   dnbr < 0.66 ~ "moderate",
#   dnbr > 0.66 ~ "high")) %>%
mutate(dnbr_qualitative = as.factor(dnbr_qualitative),
dnbr_qualitative = fct_relevel(dnbr_qualitative, levels=c("high", "moderate", "low", "unburned"))) %>%
mutate(aspect_transformed = (1-cos((2*pi*Mean_Aspect)/360))/2) %>%
mutate(three_class_mortality = case_when(
mortality_qual %in% "High" ~ "High",
mortality_qual %in% "Moderate" ~ "Moderate",
mortality_qual %in% c("Low", "None") ~ "Low")) %>%
mutate(three_class_mortality = as.factor(three_class_mortality)) %>%
mutate(three_class_mortality= fct_relevel(three_class_mortality,
levels=c("Low", "Moderate", "High")))
mcf <- read.csv('Zaca MCF variables for model.csv') %>%
mutate(mortality_qual= fct_relevel(mortality_qual, levels=c("None", "Low", "Moderate", "High"))) %>%
# mutate(dnbr_qualitative = case_when(
#   dnbr < 0.1 ~ "unburned",
#   dnbr < 0.27 ~ "low",
#   dnbr < 0.66 ~ "moderate",
#   dnbr > 0.66 ~ "high")) %>%
# mutate(dnbr_qualitative = as.factor(dnbr_qualitative),
#        dnbr_qualitative = fct_relevel(dnbr_qualitative, levels=c("high", "moderate", "low", "unburned"))) %>%
mutate(aspect_transformed = (1-cos((2*pi*Mean_Aspect)/360))/2) %>%
mutate(three_class_mortality = case_when(
mortality_qual %in% "High" ~ "High",
mortality_qual %in% "Moderate" ~ "Moderate",
mortality_qual %in% c("Low", "None") ~ "Low")) %>%
mutate(three_class_mortality = as.factor(three_class_mortality)) %>%
mutate(three_class_mortality= fct_relevel(three_class_mortality,
levels=c("Low", "Moderate", "High")))
mcf <- read.csv('Zaca MCF variables for model.csv') %>%
mutate(mortality_qual= fct_relevel(mortality_qual, levels=c("None", "Low", "Moderate", "High"))) %>%
# mutate(dnbr_qualitative = case_when(
#   dnbr < 0.1 ~ "unburned",
#   dnbr < 0.27 ~ "low",
#   dnbr < 0.66 ~ "moderate",
#   dnbr > 0.66 ~ "high")) %>%
# mutate(dnbr_qualitative = as.factor(dnbr_qualitative),
#        dnbr_qualitative = fct_relevel(dnbr_qualitative, levels=c("high", "moderate", "low", "unburned"))) %>%
mutate(aspect_transformed = (1-cos((2*pi*aspect)/360))/2) %>%
mutate(three_class_mortality = case_when(
mortality_qual %in% "High" ~ "High",
mortality_qual %in% "Moderate" ~ "Moderate",
mortality_qual %in% c("Low", "None") ~ "Low")) %>%
mutate(three_class_mortality = as.factor(three_class_mortality)) %>%
mutate(three_class_mortality= fct_relevel(three_class_mortality,
levels=c("Low", "Moderate", "High")))
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="Jan VPD") +
scale_fill_manual(values=c("red", "orange", "yellow", "green")) +
coord_flip()
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="NDVI") +
scale_fill_manual(values=c("red", "orange", "yellow", "green")) +
coord_flip()
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="NDVI")
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="NDVI") +
#scale_fill_manual(values=c("red", "orange", "yellow", "green")) +
coord_flip()
ggplot(mcf, aes(x=mortality_qual, y=vpd_jan, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="Jan VPD") +
scale_fill_manual(values=c("red", "orange", "yellow", "green")) +
coord_flip()
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="NDVI") +
scale_fill_manual(values=c("green", "yelow", "orange", "red")) +
coord_flip()
ggplot(mcf, aes(x=mortality_qual, y=ndvi, fill=mortality_qual))+
geom_violin(alpha=0.5, show.legend=F) +
theme_classic() +
labs(x="Mortality", y="NDVI") +
scale_fill_manual(values=c("green", "yellow", "orange", "red")) +
coord_flip()
mcf_sub <- mcf %>%
select (dem_10m_zaca:sr, rain:tmax, TPI_five, TWI, cwd:aspect_transformed) %>%
rename ('Elevation' = 'dem_10m_zaca',
'Slope' = 'slope',
'TPI' = 'TPI_five',
'Precip' = 'rain',
'Solar Radiation' = 'sr',
'Flow Accumulation' = 'flow_accumulation',
'CWD' = 'cwd',
'Temperature' = 'tmax',
'VPD (Jan)' = 'vpd_jan',
'VPD (Aug)' = 'vpd_aug')
mcf_sub_pca <- prcomp(mcf_sub, scale = T)
#summary
summary(mcf_sub_pca)
#summary
summary(mcf_sub_pca)
mcf_sub_pca
mcf_sub_pca
#plot
mcf_sub_pca_plot <- autoplot(mcf_sub_pca,
colour = NA, # HAVE to spell it color this way (colour) bc thats the only spelling form autoplot recognizes
loadings.label = T,
loadings.label.size = 3,
loadings.label.colour = "black",
loadings.label.repel = T) +
scale_y_continuous(lim=c(-0.15, 0.15)) +
labs(title = "Zaca Fire MCF PCA") +
theme_minimal()
#summary
summary(mcf_sub_pca)
mcf_sub_pca
#plot
mcf_sub_pca_plot <- autoplot(mcf_sub_pca,
colour = NA, # HAVE to spell it color this way (colour) bc thats the only spelling form autoplot recognizes
loadings.label = T,
loadings.label.size = 3,
loadings.label.colour = "black",
loadings.label.repel = T) +
scale_y_continuous(lim=c(-0.15, 0.15)) +
labs(title = "Zaca Fire MCF PCA") +
theme_minimal()
mcf_sub_pca_plot
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
# model parameters ------------------------------
# set sample size
nsample1 = 125
# lists to save outputs from for loop
test_accuracy_list <- list()
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample1 , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# pull random observations from the moderate class and separate
x_moderate <- sample(1:nrow(mcf_moderate), nsample1 , replace = FALSE)
polygon_data_moderate_train <- mcf_moderate[x_moderate,]
polygon_data_moderate_test <- mcf_moderate[-x_moderate,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_moderate_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_moderate_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(three_class_mortality~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = train, ntree=500, importance=T, nscale=0)
#random forest code---------------------------------------------------
for (i in 1:5)
{
# divide data into equal # of observations --------------------
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample1 , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# pull random observations from the moderate class and separate
x_moderate <- sample(1:nrow(mcf_moderate), nsample1 , replace = FALSE)
polygon_data_moderate_train <- mcf_moderate[x_moderate,]
polygon_data_moderate_test <- mcf_moderate[-x_moderate,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_moderate_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_moderate_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(three_class_mortality~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = train, ntree=500, importance=T, nscale=0)
#plot to visualize variable importance
model_importance <- importance(rfm)
#varImpPlot(rfm)
#predcit test data
pp<-predict(rfm, test)
#test data accuracy
tabb<- table(pp, test$three_class_mortality)
acc<-1-sum(diag(tabb))/sum(tabb) #% missclassified
test_accuracy <-(1-acc)*100 #model accuracy
# lists to save model accuracys
test_accuracy_list <- append(test_accuracy_list, test_accuracy)
write.table(model_importance, file="rfm model importance_3 class mortality.csv", sep=",",col.names=NA, append=T)
write.table(tabb, file = "mcf test accuracy table_3 class mortality.csv", sep=",",col.names=NA, append=T)
}
#random forest code---------------------------------------------------
for (i in 1:5)
{
# divide data into equal # of observations --------------------
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample1 , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# pull random observations from the moderate class and separate
x_moderate <- sample(1:nrow(mcf_moderate), nsample1 , replace = FALSE)
polygon_data_moderate_train <- mcf_moderate[x_moderate,]
polygon_data_moderate_test <- mcf_moderate[-x_moderate,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_moderate_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_moderate_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(three_class_mortality~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = train, ntree=500, importance=T, nscale=0)
#plot to visualize variable importance
model_importance <- importance(rfm)
model_importance
#varImpPlot(rfm)
#predcit test data
pp<-predict(rfm, test)
#test data accuracy
tabb<- table(pp, test$three_class_mortality)
acc<-1-sum(diag(tabb))/sum(tabb) #% missclassified
test_accuracy <-(1-acc)*100 #model accuracy
# lists to save model accuracys
test_accuracy_list <- append(test_accuracy_list, test_accuracy)
write.table(model_importance, file="rfm model importance_3 class mortality.csv", sep=",",col.names=NA, append=T)
write.table(tabb, file = "mcf test accuracy table_3 class mortality.csv", sep=",",col.names=NA, append=T)
}
#random forest code---------------------------------------------------
for (i in 1:5)
{
# divide data into equal # of observations --------------------
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample1 , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# pull random observations from the moderate class and separate
x_moderate <- sample(1:nrow(mcf_moderate), nsample1 , replace = FALSE)
polygon_data_moderate_train <- mcf_moderate[x_moderate,]
polygon_data_moderate_test <- mcf_moderate[-x_moderate,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_moderate_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_moderate_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(three_class_mortality~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = train, ntree=500, importance=T, nscale=0)
#plot to visualize variable importance
model_importance <- importance(rfm)
varImpPlot(rfm)
#predcit test data
pp<-predict(rfm, test)
#test data accuracy
tabb<- table(pp, test$three_class_mortality)
acc<-1-sum(diag(tabb))/sum(tabb) #% missclassified
test_accuracy <-(1-acc)*100 #model accuracy
# lists to save model accuracys
test_accuracy_list <- append(test_accuracy_list, test_accuracy)
write.table(model_importance, file="rfm model importance_3 class mortality.csv", sep=",",col.names=NA, append=T)
write.table(tabb, file = "mcf test accuracy table_3 class mortality.csv", sep=",",col.names=NA, append=T)
}
#random forest code---------------------------------------------------
for (i in 1:5)
{
# divide data into equal # of observations --------------------
mcf_high <- mcf[which(mcf$three_class_mortality == "High"),]
mcf_low <- mcf[which(mcf$three_class_mortality == "Low"),]
mcf_moderate <- mcf[which(mcf$three_class_mortality == "Moderate"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample1 , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample1 , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# pull random observations from the moderate class and separate
x_moderate <- sample(1:nrow(mcf_moderate), nsample1 , replace = FALSE)
polygon_data_moderate_train <- mcf_moderate[x_moderate,]
polygon_data_moderate_test <- mcf_moderate[-x_moderate,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_moderate_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_moderate_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(three_class_mortality~ rain + tmax + TPI_five + dem_10m_zaca + ndvi + sr + slope + TWI + cwd + vpd_aug, data = train, ntree=500, importance=T, nscale=0)
#plot to visualize variable importance
model_importance <- importance(rfm)
varImpPlot(rfm)
#predcit test data
pp<-predict(rfm, test)
#test data accuracy
tabb<- table(pp, test$three_class_mortality)
acc<-1-sum(diag(tabb))/sum(tabb) #% missclassified
test_accuracy <-(1-acc)*100 #model accuracy
# lists to save model accuracys
test_accuracy_list <- append(test_accuracy_list, test_accuracy)
write.table(model_importance, file="rfm model importance_3 class mortality.csv", sep=",",col.names=NA, append=T)
write.table(tabb, file = "mcf test accuracy table_3 class mortality.csv", sep=",",col.names=NA, append=T)
}
rfm<-randomForest(mortality_qual~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=500, importance=T, nscale=0)
rfm
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
for (i in 1:10) {
rfm<-randomForest(mortality_qual~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=500, importance=T, nscale=0)
rfm
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
}
rfm
rfm <- randomForest(three_class_mortality ~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=500, importance=T, nscale=0)
for (i in 1:10) {
rfm <- randomForest(three_class_mortality ~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=500, importance=T, nscale=0)
rfm
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
}
rfm
for (i in 1:10) {
rfm <- randomForest(three_class_mortality ~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=1500, importance=T, nscale=0)
rfm
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
}
rfm <- randomForest(mortality_qual ~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=1500, importance=T, nscale=0)
for (i in 1:10) {
rfm <- randomForest(mortality_qual ~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug, data = mcf, ntree=1500, importance=T, nscale=0)
rfm
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
}
# model parameters---------------------------------------------
mcf_mod <- mcf %>%
mutate(tc_mortality = case_when(
tc_mortality == 1 ~ "tc", #tc = type converted
tc_mortality == 0 ~ "not_tc"
)) %>%
mutate(tc_mortality = as.factor(tc_mortality))
# set sample size
nsample = 75
# lists to save outputs from for loop
test_accuracy_list <- list()
mcf_high <- mcf_mod[which(mcf_mod$tc_mortality == "tc"),]
mcf_low <- mcf_mod[which(mcf_mod$tc_mortality == "not_tc"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_high_test))
#random forest code---------------------------------------------------
for (i in 1:50)
{
# divide data into equal # of observations --------------------
mcf_high <- mcf_mod[which(mcf_mod$tc_mortality == "tc"),]
mcf_low <- mcf_mod[which(mcf_mod$tc_mortality == "not_tc"),]
# pull random observations from the high class and separate
x_high <- sample(1:nrow(mcf_high), nsample , replace = FALSE)
polygon_data_high_train <- mcf_high[x_high,]
polygon_data_high_test <- mcf_high[-x_high,]
# pull random observations from the low class and separate
x_low <- sample(1:nrow(mcf_low), nsample , replace = FALSE)
polygon_data_low_train <- mcf_low[x_low,]
polygon_data_low_test <- mcf_low[-x_low,]
# combine all random observations
train <- do.call("rbind", list(polygon_data_low_train, polygon_data_high_train))
# recombine classes that were not pulled
test <- do.call("rbind", list(polygon_data_low_test, polygon_data_high_test))
#random forest model
rfm<-randomForest(tc_mortality~ rain + tmax + TPI_five + dem_10m_zaca + flow_accumulation + sr + slope + TWI + cwd + vpd_aug + ridge + drainage_association, data = train, ntree=1500, importance=T, nscale=0)
#plot to visualize variable importance
varImpPlot(rfm)
model_importance <- importance(rfm)
#predcit test data
pp<-predict(rfm, test)
#test data accuracy
tabb<- table(pp, test$tc_mortality)
acc<-1-sum(diag(tabb))/sum(tabb) # % missclassified
test_accuracy <-(1-acc)*100 #model accuracy
# lists to save model outputs
test_accuracy_list <- append(test_accuracy_list, test_accuracy)
write.table(model_importance, file="rfm model tc importance.csv", sep=",",col.names=NA, append=T)
write.table(tabb, file = "mcf tc test accuracy table.csv", sep=",",col.names=NA, append=T)
}
accuracy_df <- as.data.frame(unlist(test_accuracy_list))
mean_test_accuracy_1 <- accuracy_df %>%
summarize(mean_accuracy = mean(unlist(test_accuracy_list)))
accuracy_df
mean_test_accuracy_1
mean_model_accuracy_1 <- accuracy_df %>%
summarize(mean_accuracy = mean(unlist(test_accuracy_list)))
mean_model_accuracy_1
# overall average model accuracy -----------------------------------------------------
accuracy_df <- as.data.frame(unlist(test_accuracy_list))
mean_model_accuracy_1 <- accuracy_df %>%
summarize(mean_accuracy = mean(unlist(test_accuracy_list)))
#average model importance ---------------------------------------------------------
model_importance_tidy <- read_csv(here("Model Data Sheets and Code", "rfm model tc importance.csv")) %>%
clean_names() %>%
filter(not_tc != "not_tc") %>%
rename (variables = x1) %>%
mutate (variables = str_to_lower(variables)) %>%
mutate (not_tc = as.numeric(not_tc),
tc = as.numeric(tc),
mean_decrease_accuracy = as.numeric(mean_decrease_accuracy),
mean_decrease_gini = as.numeric(mean_decrease_gini)
)
# model importance summary statistics
model_importance_summary <- model_importance_tidy %>%
group_by(variables) %>%
summarize (not_tc_mean = mean(not_tc),
tc_mean = mean(tc),
mean_dec_accuracy_mean = mean(mean_decrease_accuracy),
mean_decrease_gini_mean = mean(mean_decrease_gini)
)
file.remove(here::here("Model Data Sheets and Code", "rfm model tc importance.csv"))
# average class accuracy ---------------------------------------------------------
not_tc <- read_csv("mcf tc test accuracy table.csv")
tc <- read_csv("mcf tc test accuracy table.csv")
not_tc_acc <- not_tc %>%
select (X1, not_tc) %>%
drop_na() %>%
filter (X1 == "not_tc") %>%
mutate (not_tc = as.numeric(not_tc),
class_acc = not_tc / (636-nsample)) %>%
summarise(mean = mean(class_acc))
tc_acc <- tc %>%
select (X1, tc) %>%
drop_na() %>%
filter (X1 == "tc") %>%
mutate (tc = as.numeric(tc),
class_acc = tc / (99-nsample)) %>%
summarise(mean = mean(class_acc))
file.remove(here::here("Model Data Sheets and Code", "mcf tc test accuracy table.csv"))
View(model_importance_summary)
tc_acc
not_tc_acc
library(ROCR)
library(pROC)
# code: https://stats.stackexchange.com/questions/188616/how-can-we-calculate-roc-auc-for-classification-algorithm-such-as-random-forest
rfm_roc <-  roc(mcf$tc_mortality, rfm$votes[,2])
# code: https://stats.stackexchange.com/questions/188616/how-can-we-calculate-roc-auc-for-classification-algorithm-such-as-random-forest
rfm_roc <-  roc(mcf_mod$tc_mortality, rfm$votes[,2])
# code: https://stats.stackexchange.com/questions/188616/how-can-we-calculate-roc-auc-for-classification-algorithm-such-as-random-forest
rfm_roc <-  roc(mcf_mod$tc_mortality, rfm$votes[,1])
# code: https://stats.stackexchange.com/questions/188616/how-can-we-calculate-roc-auc-for-classification-algorithm-such-as-random-forest
rfm_roc <-  roc(train$tc_mortality, rfm$votes[,1])
plot(rfm_roc)
auc(rfm_roc)
sf2 <-read_csv(here::here("Shade Fraction Data Sheets and Code", "Final Zaca MCF SF_MainData.csv")) %>%
dplyr::mutate(mortality_qualitative= fct_relevel(mortality_qualitative, levels=c("None", "Low", "Moderate", "High"))) %>%
dplyr::mutate(other_mortality = fct_relevel(other_mortality, levels = c("None", "Low", "Moderate", "High", "Type Converted")))
View(sf2)
